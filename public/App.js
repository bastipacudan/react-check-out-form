class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      cnt: 0,
      userData: []
    };
    this.onSubmit = this.onSubmit.bind(this);
  }

  onSubmit(data = {}) {
    this.handleData(data, this.state.cnt);

    if (this.state.cnt == 4) {
      this.setState({
        cnt: 0
      });
      this.sendData(this.state.userData);
    } else this.setState({
      cnt: this.state.cnt + 1
    });
  }

  handleData(data, current) {
    var arr = this.state.userData;
    arr.push(data);
    this.setState({
      userData: arr
    }, () => console.log(this.state.userData));
  }

  sendData(data) {
    var userData = {};
    this.state.userData.forEach(data => {
      userData = Object.assign(userData, data);
    });
    console.log('send this data:', userData);
    fetch('/send', {
      method: 'POST',
      // or 'PUT'
      body: JSON.stringify(userData),
      // data can be `string` or {object}!
      headers: {
        'Content-Type': 'application/json'
      }
    }).then(res => res.json()).then(response => console.log('Success:', JSON.stringify(response))).catch(error => console.error('Error:', error));
  }

  getData() {
    fetch('/get', {
      method: 'GET'
    }).then(res => res.json()).then(res => console.log(res));
  }

  render() {
    if (this.state.cnt === 0) {
      return React.createElement("div", null, React.createElement(Home, {
        onSubmit: this.onSubmit
      }));
    } else if (this.state.cnt === 1) {
      return React.createElement("div", null, React.createElement(F1, {
        onSubmit: this.onSubmit
      }));
    } else if (this.state.cnt === 2) {
      return React.createElement("div", null, React.createElement(F2, {
        onSubmit: this.onSubmit
      }));
    } else if (this.state.cnt === 3) {
      return React.createElement("div", null, React.createElement(F3, {
        onSubmit: this.onSubmit
      }));
    } else {
      return React.createElement("div", null, React.createElement(Purchase, {
        props: {
          onClick: this.onSubmit,
          data: this.state.userData
        }
      }));
    }
  }

}

class Home extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    return React.createElement("div", null, React.createElement("h3", null, " Home Page"), React.createElement("button", {
      onClick: () => {
        this.props.onSubmit(this.state);
      }
    }, "Checkout"));
  }

}

class F1 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: '',
      email: '',
      password: ''
    };
  }

  onSubmit(e) {
    e.preventDefault();
    this.setState({
      name: document.getElementById('name').value,
      email: document.getElementById('email').value,
      password: document.getElementById('password').value
    }, () => {
      this.props.onSubmit(this.state);
    });
  }

  render() {
    return React.createElement("div", null, React.createElement("h3", null, "Personal Info"), React.createElement("form", {
      onSubmit: e => this.onSubmit(e)
    }, React.createElement("input", {
      type: "text",
      name: "name",
      placeholder: "Name..",
      id: "name"
    }), React.createElement("br", null), React.createElement("input", {
      type: "text",
      name: "email",
      placeholder: "Email..",
      id: "email"
    }), React.createElement("br", null), React.createElement("input", {
      type: "text",
      name: "password",
      placeholder: "Password..",
      id: "password"
    }), React.createElement("br", null), React.createElement("input", {
      type: "submit",
      value: "Submit"
    })));
  }

}

class F2 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      l1: '',
      l2: '',
      city: '',
      state: '',
      zip: ''
    };
  }

  onSubmit(e) {
    e.preventDefault();
    this.setState({
      l1: document.getElementById('l1').value,
      l2: document.getElementById('l2').value,
      city: document.getElementById('city').value,
      state: document.getElementById('state').value,
      zip: document.getElementById('zip').value
    }, () => {
      this.props.onSubmit(this.state);
    });
  }

  render() {
    return React.createElement("div", null, React.createElement("h3", null, "Address Info"), React.createElement("form", {
      onSubmit: e => this.onSubmit(e)
    }, React.createElement("input", {
      type: "text",
      name: "l1",
      placeholder: "Line 1..",
      id: "l1"
    }), React.createElement("br", null), React.createElement("input", {
      type: "text",
      name: "'l2",
      placeholder: "Line 2..",
      id: "l2"
    }), React.createElement("br", null), React.createElement("input", {
      type: "text",
      name: "city",
      placeholder: "City..",
      id: "city"
    }), React.createElement("br", null), React.createElement("input", {
      type: "text",
      name: "state",
      placeholder: "State..",
      id: "state"
    }), React.createElement("br", null), React.createElement("input", {
      type: "text",
      name: "zip",
      placeholder: "Zip Code..",
      id: "zip"
    }), React.createElement("br", null), React.createElement("input", {
      type: "submit",
      value: "Submit"
    })));
  }

}

class F3 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      creditCard: '',
      exp: '',
      cvv: ''
    };
  }

  onSubmit(e) {
    e.preventDefault();
    this.setState({
      creditCard: document.getElementById('creditCard').value,
      exp: document.getElementById('exp').value,
      cvv: document.getElementById('cvv').value
    }, () => {
      this.props.onSubmit(this.state);
    });
  }

  render() {
    return React.createElement("div", null, React.createElement("h3", null, "Billing Info"), React.createElement("form", {
      onSubmit: e => this.onSubmit(e)
    }, React.createElement("input", {
      type: "text",
      name: "cc",
      placeholder: "Credit Card #..",
      id: "creditCard"
    }), React.createElement("br", null), React.createElement("input", {
      type: "text",
      name: "exp",
      placeholder: "Expiration Date..",
      id: "exp"
    }), React.createElement("br", null), React.createElement("input", {
      type: "text",
      name: "cvv",
      placeholder: "CVV..",
      id: "cvv"
    }), React.createElement("br", null), React.createElement("input", {
      type: "submit",
      value: "Submit"
    })));
  }

}

class Purchase extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    var userData = {};
    this.props.props.data.forEach(data => {
      userData = Object.assign(userData, data);
    });
    console.log('this is the user', userData);
    return React.createElement("div", null, React.createElement("h3", null, " Confirmation Page"), React.createElement("div", null, React.createElement("h3", null, "Personal Info"), React.createElement("input", {
      type: "text",
      name: "name",
      value: userData.name,
      id: "name"
    }), React.createElement("br", null), React.createElement("input", {
      type: "text",
      name: "email",
      value: userData.email,
      id: "email"
    }), React.createElement("br", null), React.createElement("input", {
      type: "text",
      name: "password",
      value: userData.password,
      id: "password"
    }), React.createElement("br", null)), React.createElement("div", null, React.createElement("h3", null, "Address Info"), React.createElement("input", {
      type: "text",
      name: "l1",
      value: userData.l1,
      id: "l1"
    }), React.createElement("br", null), React.createElement("input", {
      type: "text",
      name: "'l2",
      value: userData.l2,
      id: "l2"
    }), React.createElement("br", null), React.createElement("input", {
      type: "text",
      name: "city",
      value: userData.city,
      id: "city"
    }), React.createElement("br", null), React.createElement("input", {
      type: "text",
      name: "state",
      value: userData.state,
      id: "state"
    }), React.createElement("br", null), React.createElement("input", {
      type: "text",
      name: "zip",
      value: userData.zip,
      id: "zip"
    }), React.createElement("br", null)), React.createElement("div", null, React.createElement("h3", null, "Billing Info"), React.createElement("input", {
      type: "text",
      name: "cc",
      value: userData.creditCard,
      id: "creditCard"
    }), React.createElement("br", null), React.createElement("input", {
      type: "text",
      name: "exp",
      value: userData.exp,
      id: "exp"
    }), React.createElement("br", null), React.createElement("input", {
      type: "text",
      name: "cvv",
      value: userData.cvv,
      id: "cvv"
    }), React.createElement("br", null)), React.createElement("br", null), React.createElement("button", {
      onClick: () => {
        this.props.props.onClick();
      }
    }, "Purchase"));
  }

}

ReactDOM.render(React.createElement(App, {
  props: {}
}), document.getElementById('app'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,